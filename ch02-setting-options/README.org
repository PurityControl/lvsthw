#+TITLE: Setting Options

There are two types of options in vimscript. Types that hold a value
and those that hold a boolean.

Values are assigned using the ~:set~ command. For the full range of
options of how set can be called see ~:help set~.

* Finding the value of options
You can get the value of an option by appending it with a question
mark.

~:set numberwidth?~

* Value options

Value options can be assigned using ~=~ there is no space between the
variable, assignment and the value. A space is allowed between the
variable and the ~=~ but not the ~=~ and the value. Multiple options
can be set with a space delimited list.

~:set numberwidth=4~
~:set numberwidth=4 matchtime=5~

Other assigment options include ~+=, -=, ^=~.

* Boolean options

Switch values can be turned on and off. You set them on by calling
them with ~:set~, you set them off by setting them with no prepended
to the variable name. Querying the variable will either return the
variable or the no form of the variable letting you know how it is
set.

The ~number~ variable is a variable that dictates whether line numbers
are shown in the editor. The example below gives examples using
number.

#+begin_src vimscript
:set number
:set number?  => number
:set nonumber
:set number?  => nonumber
#+end_src

** Toggle boolean options

Boolean options can be toggled from their current state by appending
the variable with a bang.

~set number!~

* Exercises

Some useful variables include

** number

~number~ determines whether line numbers are shown in the editor

** relativenumber

~relativenumber~ shows line numbering relative to the cursor. The
current line is line 0 and lines above and below count up from 1.

** numberwidth

~numberwidth~ is a value that dictates how many columns are assigned
for the line numbering when shown. This is the minimum number given
as larger numbers of columns are used if the line numbering place
value exceeds what is assigned. One of the columns is used to leave a
space between the numbers and text. This means a numberwidth of 4
leaves 3 columns for numbers in files up to 999 lines long. When the
file passes this length then it will use as many columns needed to
display the line numbers but all lines will use the same number of
columns.

** wrap

~wrap~ is a boolean value that dictates whether text longer than the
line scrolls off the screen out of sight or wraps onto the next line.

** shiftround

~shiftround~ is a boolean that indents using ~> and <~ type commands
to a multiple of shiftwidth. 

** matchtime

~matchtime~ holds an integer representing the number of tenths of a
second that a matching parenthesis is shown in the editor.
* Emacs
** Variables
In emacs a variable is a symbol that has a value. 
Emacs Lisp allows any variable (with a few exceptions) to have any
kind of value.
The [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Variables.html#Variables][emacs manual]] has comprehensive documentation on variables.

*** Setting Variables
Emacs distinguishes between variables that are customisable and those
that are not.

**** Customisable Variables
Customisable variables are defined with =defcustom=.  Variables that
are customisable can be set with =custom-set-variables= or
=customize-set-variable=. By using these functions you are sure that
any intended initialization or updating code that is needed for the
option value will be automatically triggered and run as needed. If you
use setq, this will not be done. There are many customisable variables
that do not use features that =customize-set-variable= and
=custom-set-variables= take care of. In such a case using =setq= will
not make a difference, so many times you may get away with using
=setq=. However this is a poor practice.

**** Uncustomisable Variables
These are simply variables that are not customisable and can be set
using the =setq= command. If you use the functions mentioned in
Customisable variables by accident it won't actually cause any
harm. So a better practice would be to use them unless you are certain
=setq= is safe.

*** Voiding variables
To unset variables or functions use =makunbound= and =fmakunbound=
respectively.

*** Checking options

Values can be checked by either evaluating them in a buffer or looking
up the variable in Emacs help.

**** Evaluating a variable

The scratch buffer is a good place to evaluate a variable. Simply type
the variable name and with the cursor after the variable type =C-x
C-e=.

**** Emacs variable help

=C-h v 'variable-name'= will give you any documentation regarding the
variable and also show the variables current value.

*** Setting multiple options at once

=custom-set-variables= and =setq= will allow mutliple options to be
set at once.

** Numbering

Linum mode =M-x linum=mode= will show line numbers in the current
buffer.

Line numbering can also be switched on for all buffers using =M-x
globa-linum-mode=. 

*** Relative Numbering and Numberwidth

Melpa has a package called relative-linum that can show relative line
numbers.

Additionally =linum-format= is a variable for linum-mode. It can take
a format string showing how the numbers should be displayed. This
would allow you to set the equivalent of vim's =numberwidt= property.
Alternatively it can take a function which should evaluate to a string
that is show on the current line. This could be used to implement
relative numbering.

** Vim / Emacs variable comparisons

| Vim            | Emacs                                  |
|----------------+----------------------------------------|
| numberwidth    | linum-format see above                 |
| relativenumber | linum-format, relative-linum see above |
| wrap           | use buffer local truncate-lines        |
| matchtime      | blink-matching-delay                   |
|----------------+----------------------------------------|

